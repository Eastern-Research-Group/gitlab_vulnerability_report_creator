import { readFileSync, writeFileSync } from "node:fs";
import path, { resolve } from "node:path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

/**
 * Read a JSON file.
 * @param {string} filePath - A JSON file to parse
 * @returns {DastResultData}
 */
function readJSONFile(filePath) {
  try {
    const jsonData = readFileSync(filePath, "utf8");
    return JSON.parse(jsonData);
  } catch (err) {
    console.error("Error reading JSON file:", err);
    throw err;
  }
}

/**
 * Generate HTML page from parsed data.
 * @param {string[]} filePaths
 * @returns {string}
 */
function generateHtmlPage(filePaths) {
  /** @type {DastResultData[]} */
  const data = filePaths.map((filePath) => readJSONFile(filePath));
  const htmlContent = readFileSync(resolve(__dirname, "template.html"), "utf8");

  data.forEach((item) => {
    // TODO: Implement the logic to generate HTML content from the parsed data and populate the template.
  });

  return htmlContent;
}

/*
## Types
*/

/**
 * @typedef DastResultData
 * @type {object}
 * @property {Scan} scan - Scan result metadata
 * @property {Vulnerability[]} Vulnerabilities - Descriptions of discovered Vulnerabilities
 */

/**
 * @typedef Identifier
 * @type {object}
 * @property {string} name - Common name for the vulnerability
 */

/**
 * @typedef Scan
 * @type {object}
 * @property {Scanner} scanner - Scanner metadata
 * @property {string} start_time - Time when the scan started
 */

/**
 * @typedef Scanner
 * @type {object}
 * @property {string} id - Unique identifier for the scanner
 * @property {string} name - Common name for the scanner
 */

/**
 * @typedef Vulnerability
 * @type {object}
 * @property {string} description - Detailed description of the vulnerability
 * @property {string} severity - Severity level of the vulnerability
 * @property {Identifier[]} identifiers - Common descriptions or CWE categories of the vulnerability
 * @property {string} discovered_at - Time during the scan when the vulnerability was discovered
 */

/*
## Main
*/

// Read filenames from command-line arguments (excluding the first two elements which are node and script path).
const filePaths = process.argv.slice(2);

// Check if filenames are provided.
if (filePaths.length === 0) {
  console.error("Please provide at least one JSON file path.");
  process.exit(1);
}

// Generate an HTML page from the provided JSON files.
const htmlContent = generateHtmlPage(filePaths);
const filepath = resolve(__dirname, "output", "report.html");
writeFileSync(filepath, htmlContent);
console.log(`Vulnerability report written to ${filepath}.`);
